import os
import json
import random
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.environ.get('TELEGRAM_API_KEY')
USER_DATA_FILE = "user_data.json"
CHANNEL_USERNAME = "@ClickerBa"  # –ò–º—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
BOT_USERNAME = "UsetAirdropOnly_Bot"  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–û–ï –ò–ú–Ø –ë–û–¢–ê

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_user_data():
    try:
        with open(USER_DATA_FILE, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_user_data(user_data):
    with open(USER_DATA_FILE, 'w') as f:
        json.dump(user_data, f, indent=2)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π
def init_user_data(user_id):
    user_data = load_user_data()
    user_id_str = str(user_id)
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    default_data = {
        'money': 0,
        'click_level': 0,
        'rebirth_level': 0,
        'click_upgrade_cost': 100,
        'rebirth_cost': 5000,
        'subscribed': False,
        'referrals': 0,
        'active_referrals': 0,
        'last_click_time': 0,
        'referrer': None
    }
    
    if user_id_str not in user_data:
        user_data[user_id_str] = default_data
        save_user_data(user_data)
        return user_data[user_id_str]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
    current_data = user_data[user_id_str]
    for key in default_data:
        if key not in current_data:
            current_data[key] = default_data[key]
    
    save_user_data(user_data)
    return current_data

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_data(user_id, data):
    user_data = load_user_data()
    user_data[str(user_id)] = data
    save_user_data(user_data)

# –†–∞—Å—á–µ—Ç —Å–∏–ª—ã –∫–ª–∏–∫–∞
def calculate_click_power(user_data):
    return 1 + user_data['click_level'] * (2 ** user_data['rebirth_level'])

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (Inline)
def main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data='balance'),
         InlineKeyboardButton("‚ö° –ö–ª–∏–∫", callback_data='click')],
        [InlineKeyboardButton("üõ† –ê–ø–≥—Ä–µ–π–¥—ã", callback_data='upgrades'),
         InlineKeyboardButton("üî• Rebirth", callback_data='rebirth_info')],
        [InlineKeyboardButton("ü´Ç –†–µ—Ñ–µ—Ä–∞–ª—ã ü´Ç", callback_data='referrals')]
    ]
    return InlineKeyboardMarkup(keyboard)

# Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞)
def get_reply_keyboard():
    return ReplyKeyboardMarkup(
        [["üí∞ –ë–∞–ª–∞–Ω—Å", "‚ö° –ö–ª–∏–∫"], 
         ["üõ† –ê–ø–≥—Ä–µ–π–¥—ã", "üî• Rebirth"],
         ["ü´Ç –†–µ—Ñ–µ—Ä–∞–ª—ã ü´Ç"]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def subscription_keyboard():
    keyboard = [
        [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
        [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data='check_subscription')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ª—É—á—à–µ–Ω–∏–π
def upgrades_keyboard(user_data):
    keyboard = [
        [InlineKeyboardButton(
            f"‚öôÔ∏è +1 –∫–ª–∏–∫ (–£—Ä. {user_data['click_level']}) - {user_data['click_upgrade_cost']}$", 
            callback_data='buy_click_upgrade')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–±–∏—Ç—Ö–∞
def rebirth_keyboard(user_data):
    keyboard = [
        [InlineKeyboardButton(
            f"üî• Rebirth (–£—Ä. {user_data['rebirth_level']}) - {user_data['rebirth_cost']}$", 
            callback_data='do_rebirth')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
def referrals_keyboard(user_id, user_data):
    ref_link = f"https://t.me/{BOT_USERNAME}?start=ref_{user_id}"
    
    keyboard = [
        [InlineKeyboardButton("üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=f"https://t.me/share/url?url={ref_link}&text=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è%20–∫%20–º–æ–µ–π%20–∏–≥—Ä–µ%20–∫–ª–∏–∫–µ—Ä!")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def check_channel_subscription(user_id, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_member = await context.bot.get_chat_member(
            chat_id=CHANNEL_USERNAME, 
            user_id=user_id
        )
        return chat_member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_data = init_user_data(user_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    if context.args:
        for arg in context.args:
            if arg.startswith('ref_'):
                try:
                    referrer_id = int(arg[4:])
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∏–º–µ–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                    if user_data.get('referrer') is None:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        all_data = load_user_data()
                        if str(referrer_id) in all_data:
                            user_data['referrer'] = referrer_id
                            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                            referrer_data = all_data[str(referrer_id)]
                            referrer_data['referrals'] = referrer_data.get('referrals', 0) + 1
                            update_user_data(referrer_id, referrer_data)
                except ValueError:
                    pass
    
    is_subscribed = await check_channel_subscription(user_id, context)
    user_data['subscribed'] = is_subscribed
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
    if user_data.get('referrer') and is_subscribed:
        referrer_id = user_data['referrer']
        all_data = load_user_data()
        if str(referrer_id) in all_data:
            referrer_data = all_data[str(referrer_id)]
            referrer_data['active_referrals'] = referrer_data.get('active_referrals', 0) + 1
            update_user_data(referrer_id, referrer_data)
    
    update_user_data(user_id, user_data)
    
    if not is_subscribed:
        welcome_text = (
            "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Clicker Game!\n\n"
            "‚ùå –î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
            f"üëâ {CHANNEL_USERNAME}\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
        )
        await update.message.reply_text(
            welcome_text,
            reply_markup=subscription_keyboard()
        )
    else:
        welcome_text = (
            "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Clicker Game!\n\n"
            "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–≥—Ä—ã:"
        )
        await update.message.reply_text(
            welcome_text,
            reply_markup=get_reply_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    user_id = update.effective_user.id
    user_data = init_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not user_data.get('subscribed', False):
        await update.message.reply_text(
            "‚ùå –î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=subscription_keyboard()
        )
        return
    
    if text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        await show_balance(update, context)
    elif text == "‚ö° –ö–ª–∏–∫":
        await handle_click(update, context)
    elif text == "üõ† –ê–ø–≥—Ä–µ–π–¥—ã":
        await show_upgrades(update, context)
    elif text == "üî• Rebirth":
        await rebirth_info(update, context)
    elif text == "ü´Ç –†–µ—Ñ–µ—Ä–∞–ª—ã ü´Ç":
        await show_referrals(update, context)
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π",
            reply_markup=get_reply_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_data = init_user_data(user_id)
    
    is_subscribed = await check_channel_subscription(user_id, context)
    
    if is_subscribed:
        user_data['subscribed'] = True
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        if user_data.get('referrer'):
            referrer_id = user_data['referrer']
            all_data = load_user_data()
            if str(referrer_id) in all_data:
                referrer_data = all_data[str(referrer_id)]
                referrer_data['active_referrals'] = referrer_data.get('active_referrals', 0) + 1
                update_user_data(referrer_id, referrer_data)
        
        update_user_data(user_id, user_data)
        
        await query.edit_message_text(
            text="‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å."
        )
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–≥—Ä—ã:",
            reply_markup=get_reply_keyboard()
        )
    else:
        await query.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –±–∞–ª–∞–Ω—Å–∞
async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (callback –∏–ª–∏ message)
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        chat_id = query.message.chat_id
        message_id = query.message.message_id
        is_callback = True
    else:
        user_id = update.message.from_user.id
        chat_id = update.message.chat_id
        is_callback = False
    
    user_data = init_user_data(user_id)
    click_power = calculate_click_power(user_data)
    
    balance_text = (
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data.get('money', 0)}$\n"
        f"‚ö° –°–∏–ª–∞ –∫–ª–∏–∫–∞: {click_power}\n"
        f"üõ† –£—Ä–æ–≤–µ–Ω—å –∫–ª–∏–∫–∞: {user_data.get('click_level', 0)}\n"
        f"üî• –£—Ä–æ–≤–µ–Ω—å Rebirth: {user_data.get('rebirth_level', 0)}\n"
        f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {'‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω' if user_data.get('subscribed', False) else '‚ùå –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω'}\n\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª—ã: {user_data.get('referrals', 0)} (–ê–∫—Ç–∏–≤–Ω—ã—Ö: {user_data.get('active_referrals', 0)})"
    )
    
    if is_callback:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=balance_text,
            reply_markup=main_keyboard()
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=balance_text,
            reply_markup=main_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
async def handle_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        chat_id = query.message.chat_id
        message_id = query.message.message_id
        is_callback = True
    else:
        user_id = update.message.from_user.id
        chat_id = update.message.chat_id
        is_callback = False
    
    user_data = init_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not user_data.get('subscribed', False):
        if is_callback:
            await query.answer("‚ùå –î–ª—è –∫–ª–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –î–ª—è –∫–ª–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
                reply_markup=subscription_keyboard()
            )
        return
    
    # –ê–Ω—Ç–∏-–∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä: —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 0.5 –¥–æ 1.4 —Å–µ–∫—É–Ω–¥
    current_time = time.time()
    last_click_time = user_data.get('last_click_time', 0)
    time_since_last_click = current_time - last_click_time
    min_delay = 0.5
    max_delay = 1.4
    required_delay = random.uniform(min_delay, max_delay)
    
    if time_since_last_click < required_delay:
        remaining = round(required_delay - time_since_last_click, 1)
        if is_callback:
            await query.answer(f"‚è≥ –ö–ª–∏–∫–∞–π—Ç–µ –º–µ–¥–ª–µ–Ω–Ω–µ–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫.", show_alert=True)
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚è≥ –ö–ª–∏–∫–∞–π—Ç–µ –º–µ–¥–ª–µ–Ω–Ω–µ–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫.",
            )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª–∏–∫–∞
    user_data['last_click_time'] = current_time
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏
    click_power = calculate_click_power(user_data)
    user_data['money'] = user_data.get('money', 0) + click_power
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É (20%)
    referrer_id = user_data.get('referrer')
    if referrer_id:
        all_data = load_user_data()
        if str(referrer_id) in all_data:
            referrer_data = all_data[str(referrer_id)]
            bonus = round(click_power * 0.2)
            if bonus < 1:
                bonus = 1
            referrer_data['money'] = referrer_data.get('money', 0) + bonus
            update_user_data(referrer_id, referrer_data)
    
    update_user_data(user_id, user_data)
    
    result_text = f"‚úÖ +{click_power}$! –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['money']}$"
    
    if is_callback:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=result_text,
            reply_markup=main_keyboard()
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=result_text,
            reply_markup=main_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
async def show_referrals(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        chat_id = query.message.chat_id
        message_id = query.message.message_id
        is_callback = True
    else:
        user_id = update.message.from_user.id
        chat_id = update.message.chat_id
        is_callback = False
    
    user_data = init_user_data(user_id)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    ref_link = f"https://t.me/{BOT_USERNAME}?start=ref_{user_id}"
    
    referrals_text = (
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user_data.get('referrals', 0)}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_data.get('active_referrals', 0)}\n\n"
        f"üí∏ –ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:\n"
        f"‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 20% –æ—Ç –µ–≥–æ –∫–ª–∏–∫–æ–≤!\n"
        f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª\n\n"
        f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥!"
    )
    
    if is_callback:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=referrals_text,
            reply_markup=referrals_keyboard(user_id, user_data)
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=referrals_text,
            reply_markup=referrals_keyboard(user_id, user_data))
        

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ø–≥—Ä–µ–π–¥–æ–≤
async def show_upgrades(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        chat_id = query.message.chat_id
        message_id = query.message.message_id
        is_callback = True
    else:
        user_id = update.message.from_user.id
        chat_id = update.message.chat_id
        is_callback = False
    
    user_data = init_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not user_data.get('subscribed', False):
        if is_callback:
            await query.answer("‚ùå –î–ª—è —É–ª—É—á—à–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –î–ª—è —É–ª—É—á—à–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
                reply_markup=subscription_keyboard()
            )
        return
    
    upgrades_text = (
        f"üõ† –£–ª—É—á—à–µ–Ω–∏—è:\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data.get('money', 0)}$\n"
        f"‚ö° –°–∏–ª–∞ –∫–ª–∏–∫–∞: {calculate_click_power(user_data)}\n"
        f"üõ† –£—Ä–æ–≤–µ–Ω—å –∫–ª–∏–∫–∞: {user_data.get('click_level', 0)}\n"
        f"üî• –£—Ä–æ–≤–µ–Ω—å Rebirth: {user_data.get('rebirth_level', 0)}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏–µ:"
    )
    
    if is_callback:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=upgrades_text,
            reply_markup=upgrades_keyboard(user_data)
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=upgrades_text,
            reply_markup=upgrades_keyboard(user_data)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–ª–∏–∫–∞
async def buy_click_upgrade(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_data = init_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not user_data.get('subscribed', False):
        await query.answer("‚ùå –î–ª—è –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
        return
    
    if user_data.get('money', 0) >= user_data.get('click_upgrade_cost', 100):
        user_data['money'] = user_data.get('money', 0) - user_data.get('click_upgrade_cost', 100)
        user_data['click_level'] = user_data.get('click_level', 0) + 1
        user_data['click_upgrade_cost'] = user_data.get('click_upgrade_cost', 100) * 3
        update_user_data(user_id, user_data)
        
        result_text = (
            f"‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –∫—É–ø–ª–µ–Ω–æ!\n\n"
            f"‚ö° –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–ª–∏–∫–∞: {user_data.get('click_level', 0)}\n"
            f"üí™ –°–∏–ª–∞ –∫–ª–∏–∫–∞: {calculate_click_power(user_data)}\n"
            f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {user_data.get('money', 0)}$"
        )
    else:
        result_text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ {user_data.get('click_upgrade_cost', 100)}$"
    
    await query.edit_message_text(
        text=result_text,
        reply_markup=upgrades_keyboard(user_data)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–±–∏—Ç—Ö–µ
async def rebirth_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        chat_id = query.message.chat_id
        message_id = query.message.message_id
        is_callback = True
    else:
        user_id = update.message.from_user.id
        chat_id = update.message.chat_id
        is_callback = False
    
    user_data = init_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not user_data.get('subscribed', False):
        if is_callback:
            await query.answer("‚ùå –î–ª—è —Ä–µ–±–∏—Ç—Ö–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –î–ª—è —Ä–µ–±–∏—Ç—Ö–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
                reply_markup=subscription_keyboard()
            )
        return
    
    # –†–∞—Å—Å—á–∏—Ç–∞–µ–º —Å–∏–ª—É –∫–ª–∏–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–±–∏—Ç—Ö–∞
    after_rebirth_power = 1 * (2 ** (user_data.get('rebirth_level', 0) + 1))
    current_power = calculate_click_power(user_data)
    
    rebirth_text = (
        "üî• Rebirth:\n\n"
        "–ü–æ—Å–ª–µ Rebirth:\n"
        "- –í–∞—à–∏ –¥–µ–Ω—å–≥–∏ –æ–±–Ω—É–ª—è—Ç—Å—è\n"
        "- –£–ª—É—á—à–µ–Ω–∏—è –∫–ª–∏–∫–∞ —Å–±—Ä–æ—Å—è—Ç—Å—è\n"
        "- –í—ã –ø–æ–ª—É—á–∏—Ç–µ +100% –∫ —Å–∏–ª–µ –∫–ª–∏–∫–∞\n\n"
        f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {user_data.get('rebirth_level', 0)}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {user_data.get('rebirth_cost', 1000)}$\n\n"
        f"–ü–æ—Å–ª–µ Rebirth –≤–∞—à–∞ —Å–∏–ª–∞ –∫–ª–∏–∫–∞ –±—É–¥–µ—Ç:\n"
        f"‚ö° {after_rebirth_power} –≤–º–µ—Å—Ç–æ —Ç–µ–∫—É—â–∏—Ö {current_power}"
    )
    
    if is_callback:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=rebirth_text,
            reply_markup=rebirth_keyboard(user_data)
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=rebirth_text,
            reply_markup=rebirth_keyboard(user_data)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–±–∏—Ç—Ö–∞
async def do_rebirth(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_data = init_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not user_data.get('subscribed', False):
        await query.answer("‚ùå –î–ª—è —Ä–µ–±–∏—Ç—Ö–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
        return
    
    if user_data.get('money', 0) >= user_data.get('rebirth_cost', 1000):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        old_level = user_data.get('rebirth_level', 0)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–±–∏—Ç—Ö
        user_data['money'] = 0
        user_data['click_level'] = 0
        user_data['rebirth_level'] = old_level + 1
        user_data['click_upgrade_cost'] = 100
        user_data['rebirth_cost'] = user_data.get('rebirth_cost', 1000) * 10
        update_user_data(user_id, user_data)
        
        new_power = calculate_click_power(user_data)
        
        result_text = (
            f"üî• Rebirth –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n"
            f"üéâ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å Rebirth: {user_data.get('rebirth_level', 0)} (–±—ã–ª {old_level})\n"
            f"‚ö° –í–∞—à–∞ –Ω–æ–≤–∞—è —Å–∏–ª–∞ –∫–ª–∏–∫–∞: {new_power}\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data.get('money', 0)}$"
        )
    else:
        result_text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ {user_data.get('rebirth_cost', 1000)}$"
    
    await query.edit_message_text(
        text=result_text,
        reply_markup=rebirth_keyboard(user_data)
    )

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_data = init_user_data(user_id)
    click_power = calculate_click_power(user_data)
    
    await query.edit_message_text(
        text=f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data.get('money', 0)}$ | ‚ö° –°–∏–ª–∞ –∫–ª–∏–∫–∞: {click_power}",
        reply_markup=main_keyboard()
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(check_subscription, pattern='^check_subscription$'))
    application.add_handler(CallbackQueryHandler(show_balance, pattern='^balance$'))
    application.add_handler(CallbackQueryHandler(handle_click, pattern='^click$'))
    application.add_handler(CallbackQueryHandler(show_upgrades, pattern='^upgrades$'))
    application.add_handler(CallbackQueryHandler(rebirth_info, pattern='^rebirth_info$'))
    application.add_handler(CallbackQueryHandler(do_rebirth, pattern='^do_rebirth$'))
    application.add_handler(CallbackQueryHandler(back_to_main, pattern='^back$'))
    application.add_handler(CallbackQueryHandler(show_referrals, pattern='^referrals$'))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
